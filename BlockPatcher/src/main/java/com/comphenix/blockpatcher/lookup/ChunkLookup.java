package com.comphenix.blockpatcher.lookup;

import java.io.Serializable;
import java.util.Arrays;

import com.google.common.base.Objects;
import com.google.common.base.Preconditions;

/**
 * A chunk lookup table.
 * 
 * @author Kristian
 */
public class ChunkLookup implements ConversionLookup, Serializable {

	/**
	 * Generated by Eclipse.
	 */
	private static final long serialVersionUID = 7629856250358703576L;

	/**
	 * The translation table we'll be using.
	 */
	protected byte[] blockLookup;

	/**
	 * The data value translation table we'll use.
	 */
	protected byte[] dataLookup;

	/**
	 * Generate a new chunk lookup table using default identity arrays.
	 * <p>
	 * This means that no block ID or data value will change.
	 */
	public ChunkLookup() {
		this(null, null);
	}

	/**
	 * Generate a block lookup table.
	 * 
	 * @param blockLookup - the byte lookup table, or NULL to use the identity table.
	 * @param dataLookup
	 */
	public ChunkLookup(byte[] blockLookup, byte[] dataLookup) {
		this.blockLookup = blockLookup != null ? blockLookup : getIdentityTranslation(256);
		this.dataLookup = dataLookup != null ? dataLookup : getDataIdentity(256, 16);
	}

	/**
	 * Clones the content of another block lookup.
	 * 
	 * @param other - block lookup to copy.
	 */
	private ChunkLookup(ConversionLookup other) {
		this.blockLookup = other.getBlockLookup();
		this.dataLookup = other.getDataLookup();
	}

	@Override
	public byte[] getBlockLookup() {
		return blockLookup.clone();
	}

	@Override
	public byte[] getDataLookup() {
		return dataLookup.clone();
	}

	@Override
	public void setBlockLookup(int blockID, int newBlockID) {
		Preconditions.checkPositionIndex(blockID, 256, "Block ID must be in the range 0 - 256");
		Preconditions.checkPositionIndex(newBlockID, 256, "New block ID must be in the range 0 - 256");

		blockLookup[blockID] = (byte) newBlockID;
	}

	@Override
	public int getBlockLookup(int blockID) {
		// We intentially skip range checking for performance reasons
		return blockLookup[blockID] & 0xFF;
	}

	@Override
	public void setDataLookup(int blockID, int originalDataValue, int newDataValue) {
		Preconditions.checkPositionIndex(blockID, 256, "Block ID must be in the range 0 - 256");
		Preconditions.checkPositionIndex(originalDataValue, 16, "Original data value must be in the range 0 - 15");
		Preconditions.checkPositionIndex(newDataValue, 16, "New data value must be in the range 0 - 15");

		dataLookup[(blockID << 4) + originalDataValue] = (byte) newDataValue;
	}

	@Override
	public int getDataLookup(int blockID, int dataValue) {
		return dataLookup[(blockID << 4) + dataValue] & 0xF;
	}

	@Override
	public ConversionLookup deepClone() {
		return new ChunkLookup(this);
	}

	@Override
	public boolean equals(Object other) {
		if (other == this)
			return true;
		if (other == null)
			return false;

		// Ensure that LazyCopyLookup is commutative
		if (other instanceof LazyCopyLookup) {
			return other.equals(this);
		} else if (other instanceof ChunkLookup) {
			ChunkLookup lookup = (ChunkLookup) other;
			return Arrays.equals(blockLookup, lookup.blockLookup) && Arrays.equals(dataLookup, lookup.dataLookup);
		} else {
			return super.equals(other);
		}
	}

	@Override
	public int hashCode() {
		return Objects.hashCode(Arrays.hashCode(blockLookup), Arrays.hashCode(dataLookup));
	}

	/**
	 * Generate a translation table that doesn't change any value.
	 * 
	 * @param max - the maximum number of entries in the table.
	 * @return The identity translation table.
	 */
	public static byte[] getIdentityTranslation(int max) {
		byte[] values = new byte[max];

		for (int i = 0; i < values.length; i++) {
			values[i] = (byte) i;
		}
		return values;
	}

	/**
	 * Generate an identity translation table that doesn't change anything.
	 * 
	 * @param blocks - number of blocks.
	 * @param entries - number of data values per block.
	 * @return The translation table.
	 */
	public static byte[] getDataIdentity(int blocks, int entries) {
		byte[] values = new byte[blocks * entries];

		for (int i = 0; i < values.length; i++) {
			values[i] = (byte) (i % entries);
		}
		return values;
	}
}
